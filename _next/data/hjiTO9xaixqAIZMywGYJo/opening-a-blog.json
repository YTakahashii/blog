{"pageProps":{"post":{"slug":"opening-a-blog","title":"Next.jsで技術ブログを作った話","publishDate":"2021-08-15","coverImage":"","excerpt":"Next.jsを使って技術ブログを作りました。使用した技術スタックと実装や学びについて共有します。","ogImage":{"url":"https://og-image-for-blog.vercel.app/**Next.jsで技術ブログを作った話**.png?theme=light&md=1&fontSize=100px"},"content":"<p><strong>世はまさに、自作技術ブログ時代！</strong> という訳で、Next.js 等を使って技術ブログを作りました。</p>\n<p>一旦、きりの良いところまで実装が終わったので、公開しようと思います！</p>\n<p>このブログでは、趣味で触った技術のことについて、ざっくばらんに記事を投稿していく予定です。\nまた、私は Web Frontend が好きなので、関連技術の実験場にも活用していきます。</p>\n<p>ゴールデンウィークから作り始めて、休日にちまちまやっていたので、随分時間がかかってしまいましたが、いい感じに仕上がってとりあえず満足しています。</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">ゴールデンウィークなので、ブログを作りはじめた <a href=\"https://t.co/wpIXkEehwl\">pic.twitter.com/wpIXkEehwl</a></p>— yuchan (@Wakeupsloth) <a href=\"https://twitter.com/Wakeupsloth/status/1389551048017080322?ref_src=twsrc%5Etfw\">May 4, 2021</a></blockquote>\n<p>以降のセクションでは、技術スタックと、実装に一番の時間を要した Markdown ファイルから React コンポーネントに変換するまでの処理の詳細について振り返ります。</p>\n<h3>技術スタック</h3>\n<p>本ブログの開発に使用した技術は以下の通りです。（みんな使ってそうな構成）</p>\n<ul>\n<li><a href=\"https://nextjs.org/\">Next.js</a>：言わずと知れた React のフレームワーク</li>\n<li><a href=\"https://chakra-ui.com/\">Chakra UI</a>：tailwind like に React コンポーネントのスタイリングができるコンポーネントライブラリ</li>\n<li><a href=\"https://github.com/jonschlinkert/gray-matter\">jonschlinkert/gray-matter</a>：Markdown に yaml でメタ情報を埋め込めるやつ</li>\n<li><a href=\"https://github.com/unifiedjs/unified\">unifiedjs/unified</a>：構文木を使用してテキストを処理するためのインターフェース</li>\n<li><a href=\"https://shiki.matsu.io/\">shiki</a>：コードハイライター</li>\n<li><a href=\"https://github.com/vercel/og-image\">vercel/og-image</a>：OGP 画像の生成</li>\n<li><a href=\"https://pages.github.com/\">GitHub Pages</a>：サイトのホスティング</li>\n</ul>\n<h2>やったこと＆学び</h2>\n<p>最初のゴールとして、Markdown から記事を生成可能かつ、それを見てもらうための最低限の機能に絞って開発を進めました。\nやったことを大別すると以下の 3 つになるのかなと思います。</p>\n<ul>\n<li>Markdown ファイルからの記事ページ生成とレイアウト設定\n<ul>\n<li>MD を変換する処理を実装することで、構文木の世界を学べた</li>\n</ul>\n</li>\n<li>プライベート記事機能\n<ul>\n<li><a href=\"/\">ブログのトップページ</a>や Google 検索の結果に載せないプライベート記事（例：<a href=\"/_playground\">Playground</a>）を公開する機能</li>\n</ul>\n</li>\n<li>メタタグの設定\n<ul>\n<li>これまで業務的な Web アプリばかりを開発してきたため、学びが多かった</li>\n</ul>\n</li>\n</ul>\n<h2>Markdown ファイルの内容を React コンポーネントに変換する</h2>\n<h3>1．Next.js で全 Markdown ファイルを取得して記事ページを生成する</h3>\n<p>記事ページの生成は Next.js の SSG を使います。</p>\n<p>具体的には、<a href=\"https://github.com/YTakahashii/blog/blob/573224fa61a263d26c861aaea6696ad22f0a5469/src/pages/%5Bslug%5D.tsx#L1\">pages/[slug].tsx</a>内で、 <code>getStaticPaths</code> を使って Markdown のファイル名から記事ページの URL を生成し、</p>\n<pre class=\"shiki\" style=\"background-color: #24292e\"><code><span class=\"line\"><span style=\"color: #F97583\">export</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">getStaticPaths</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">GetStaticPaths</span><span style=\"color: #E1E4E8\">&#x3C;</span><span style=\"color: #B392F0\">Params</span><span style=\"color: #E1E4E8\">> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">async</span><span style=\"color: #E1E4E8\"> () </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">posts</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">getAllPosts</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'all'</span><span style=\"color: #E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">return</span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    paths: posts.</span><span style=\"color: #B392F0\">map</span><span style=\"color: #E1E4E8\">((</span><span style=\"color: #FFAB70\">post</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> ({</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      params: {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        slug: post.slug,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      },</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    })),</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    fallback: </span><span style=\"color: #79B8FF\">false</span><span style=\"color: #E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  };</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>getStaticProps</code> を使って render する 記事の情報を取得し、Page コンポーネントの Props として渡します。</p>\n<pre class=\"shiki\" style=\"background-color: #24292e\"><code><span class=\"line\"><span style=\"color: #F97583\">export</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">getStaticProps</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">GetStaticProps</span><span style=\"color: #E1E4E8\">&#x3C;{ </span><span style=\"color: #FFAB70\">post</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">Post</span><span style=\"color: #E1E4E8\"> }, </span><span style=\"color: #B392F0\">Params</span><span style=\"color: #E1E4E8\">> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">async</span><span style=\"color: #E1E4E8\"> ({ </span><span style=\"color: #FFAB70\">params</span><span style=\"color: #E1E4E8\"> }) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">post</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">getPostBySlug</span><span style=\"color: #E1E4E8\">(params.slug);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">html</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">await</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">markdownToHtml</span><span style=\"color: #E1E4E8\">(post.content </span><span style=\"color: #F97583\">??</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">''</span><span style=\"color: #E1E4E8\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">return</span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    props: {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      post: {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        </span><span style=\"color: #F97583\">...</span><span style=\"color: #E1E4E8\">post,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        content: html,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      },</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    },</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  };</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<h3>2．unified で Markdown を整形して HTML の文字列に変換する</h3>\n<p>上記の <code>getPostBySlug()</code> では、Markdown ファイルの中身（<code>post.content</code>）を文字列で取得します。</p>\n<p>続く<code>markdownToHtml()</code>では、<code>unified</code> を使って、ファイルの中身を HTML の文字列に変換していきます。</p>\n<pre class=\"shiki\" style=\"background-color: #24292e\"><code><span class=\"line\"><span style=\"color: #F97583\">export</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">async</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">function</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">markdownToHtml</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #FFAB70\">markdown</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">string</span><span style=\"color: #E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">result</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">unified</span><span style=\"color: #E1E4E8\">()</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    .</span><span style=\"color: #B392F0\">use</span><span style=\"color: #E1E4E8\">(remarkParse)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    .</span><span style=\"color: #B392F0\">use</span><span style=\"color: #E1E4E8\">(remarkRehype, { allowDangerousHtml: </span><span style=\"color: #79B8FF\">true</span><span style=\"color: #E1E4E8\"> })</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    .</span><span style=\"color: #B392F0\">use</span><span style=\"color: #E1E4E8\">(rehypeRaw)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    .</span><span style=\"color: #B392F0\">use</span><span style=\"color: #E1E4E8\">(rehypeShiki, {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      highlighter: </span><span style=\"color: #F97583\">await</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">getHighlighter</span><span style=\"color: #E1E4E8\">({</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        theme: </span><span style=\"color: #9ECBFF\">'github-dark'</span><span style=\"color: #E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      }),</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    })</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    .</span><span style=\"color: #B392F0\">use</span><span style=\"color: #E1E4E8\">(rehypeStringify)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    .</span><span style=\"color: #B392F0\">processSync</span><span style=\"color: #E1E4E8\">(markdown);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">return</span><span style=\"color: #E1E4E8\"> result.</span><span style=\"color: #B392F0\">toString</span><span style=\"color: #E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">}</span></span>\n<span class=\"line\"></span></code></pre>\n<p>変換処理の概要は以下の通りです。</p>\n<ul>\n<li><code>remarkParse</code>：Markdown の文字列を<a href=\"https://github.com/syntax-tree/mdast\">mdast</a>（Markdown Abstract Syntax Tree format）に変換する</li>\n<li><code>remarkRehype</code>：mdast を <a href=\"https://github.com/syntax-tree/hast\">hast</a>（Hypertext Abstract Syntax Tree format）に変換する，<code>{ allowDangerousHtml: true }</code> により、生の HTML はそのまま残す</li>\n<li><code>rehypeRaw</code>：hast 内の生 HTML を hast に変換する</li>\n<li><code>rehypeShiki</code>：コードハイライターの shiki を使って 複数行のコードブロック をハイライトするスタイルを適用する</li>\n<li><code>rehypeStringify</code>：hast を HTML の文字列に変換する</li>\n</ul>\n<h3>3．HTML の文字列を React コンポーネントに変換する</h3>\n<p>最後に <code>markdownToHtml()</code> で取得した HTML 文字列を <a href=\"https://github.com/remarkjs/react-markdown\">remarkjs/react-markdown</a>を使って React コンポーネントに変換します。（<a href=\"https://github.com/YTakahashii/blog/blob/main/src/components/markdowns/Markdown.tsx\">components/markdowns/Markdown.tsx</a>）</p>\n<pre class=\"shiki\" style=\"background-color: #24292e\"><code><span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #E1E4E8\"> ReactMarkdown </span><span style=\"color: #F97583\">from</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'react-markdown'</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #E1E4E8\"> rehypeRaw </span><span style=\"color: #F97583\">from</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'rehype-raw'</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">*</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">as</span><span style=\"color: #E1E4E8\"> components </span><span style=\"color: #F97583\">from</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'src/components/markdowns/_components'</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">export</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">Markdown</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">React</span><span style=\"color: #E1E4E8\">.</span><span style=\"color: #B392F0\">VFC</span><span style=\"color: #E1E4E8\">&#x3C;</span><span style=\"color: #B392F0\">Props</span><span style=\"color: #E1E4E8\">> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> ({ </span><span style=\"color: #FFAB70\">rawHtml</span><span style=\"color: #E1E4E8\"> }) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> (</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  &#x3C;</span><span style=\"color: #79B8FF\">ReactMarkdown</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">rehypePlugins</span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\">{[rehypeRaw]} </span><span style=\"color: #B392F0\">children</span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\">{rawHtml} </span><span style=\"color: #B392F0\">components</span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\">{components} /></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>このとき、<code>components</code> に React コンポーネントを渡すことで、任意のタグを自由に変換することができます。今回は、変換するコンポーネントを<a href=\"\">components/markdowns/_components</a>の中に定義しました。</p>\n<p>変換する対象は、<a href=\"https://github.com/YTakahashii/blog/blob/573224fa61a263d26c861aaea6696ad22f0a5469/src/components/markdowns/_components/table.tsx#L1\"><code>&#x3C;table /></code></a>のように、Chakra UI のコンポーネントに置き換えるタグと、<a href=\"https://github.com/YTakahashii/blog/blob/573224fa61a263d26c861aaea6696ad22f0a5469/src/components/markdowns/_components/a.tsx#L1\"><code>&#x3C;a /></code></a>のように、Props に応じて、レンダリングするコンポーネントを出し分けるタグです。</p>\n<p>スタイルだけ当てたいタグについてはここでは変換せず、 <a href=\"https://github.com/YTakahashii/blog/blob/main/src/theme/index.ts\">Chakra UI のテーマを設定</a>しました。</p>\n<p>また、今回は変換対象の文字列（<code>children</code>）が HTML の形式であるため、<code>rehypePlugins</code> に <code>rehypeRaw</code> を指定して、hast に変換する処理を加える必要がありました。ピュアな MD 形式の文字列である場合は、<code>rehypeRaw</code> は不要です。</p>\n<h2>今後実装したい機能</h2>\n<ul>\n<li>タグ機能\n<ul>\n<li>記事が増えていくにつれて探すのが大変になりそうなので、そのうち実装したいお気持ち</li>\n</ul>\n</li>\n<li>目次機能\n<ul>\n<li>この記事みて思ったけど、やっぱり目次あったほうが見やすいですね</li>\n</ul>\n</li>\n<li>ダークモードや PWA\n<ul>\n<li>新しい Web の機能をどんどん使っていきたいお気持ち</li>\n</ul>\n</li>\n<li>カッコいい OGP 画像の作成\n<ul>\n<li>今のデザインが超適当なので、どこかで気合を入れて作り込みたい</li>\n</ul>\n</li>\n</ul>\n<h2>おわりに</h2>\n<p>これからは、ブログをもっと良くしたり、学んだ内容を定期的にアウトプットしていきたいと思います！</p>\n<p>最初は、「ブログなんて今更自分で作ってもな〜」とか思ってたのですが、車輪の再発明をすることで学べることも多いなと感じました。</p>","url":"https://ytakahashii.github.io/blog/opening-a-blog","isPrivate":false}},"__N_SSG":true}