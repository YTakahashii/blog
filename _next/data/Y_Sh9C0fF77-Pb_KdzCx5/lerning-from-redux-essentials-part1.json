{"pageProps":{"post":{"slug":"lerning-from-redux-essentials-part1","title":"Redux Essentials から学ぶ Part1：Modern Redux とパフォーマンス最適化","publishDate":"2021-09-25","coverImage":"","excerpt":"公式チュートリアルの Redux Essentials を読みながら、JavaScript を TypeScript に変換しつつ写経することで、redux-toolkit を使ったモダンな 書き方や RTK Query について学びました。","ogImage":{"url":"https://raw.githubusercontent.com/YTakahashii/blog/47bc1570103ff3178de2d5ba2e3376d5b3b9df04/public/assets/blog/lerning-from-redux-essentials-part1/ogimage.png"},"content":"<p>アプリケーションの状態管理は、フロントエンド開発で注目されているトピックの 1 つです。\nReact のグローバル状態管理ライブラリといえば、2，3 年前は Redux 一強でしたが、2021 年現在は、<a href=\"https://www.apollographql.com/docs/react/\">Apollo Client</a>, <a href=\"https://recoiljs.org/\">Recoil</a>, <a href=\"https://jotai.pmnd.rs/\">jotai</a>, <a href=\"https://swr.vercel.app/\">SWR</a> 等、様々なものがあります。</p>\n<p>私は、2019 年の 3 月頃まで約 2 年ほど Redux を使った開発を経験していましたが、その後は SWR や Apollo Client を採用したプロジェクトで開発していたため、しばらく Redux から離れていました。\nですが、この度新卒エンジニアとして、9 月から Redux を使っているプロダクトの開発チームに本配属され、再び Redux と真剣に向き合うことになりました！</p>\n<p>そんな中、先日参加した<a href=\"https://mercari.connpass.com/event/221978/\">Souzoh Tech Talk #03: Frontend</a>の中で紹介された、<a href=\"https://redux.js.org/style-guide/style-guide#structure-files-as-feature-folders-with-single-file-logic\">\"feature pattern\"</a> という Redux 推奨のディレクトリ構成の話がきっかけで、Redux のドキュメントが 2019 年当時より大幅にアップデートされていることを知りました。</p>\n<p>これは Redux を学び直す良い機会だなと思い、ここ 1 週間くらい、公式チュートリアルの Redux Essentials を読みながら、JavaScript を TypeScript に変換しつつ写経することで、redux-toolkit を使ったモダンな 書き方や RTK Query について学びました。</p>\n<ul>\n<li><a href=\"https://github.com/YTakahashii/redux-essentials-example-app-ts\">https://github.com/YTakahashii/redux-essentials-example-app-ts</a></li>\n</ul>\n<p>Redux Essentials は、全 8 回に渡る内容で、結構ボリューミーだったため、今回は Part1 と第して、第 1 回〜第 6 回までから得た学びをピックアップしてまとめます。</p>\n<ul>\n<li><a href=\"https://redux.js.org/tutorials/essentials/part-1-overview-concepts\">Redux Essentials, Part 1: Redux Overview and Concepts</a></li>\n<li><a href=\"https://redux.js.org/tutorials/essentials/part-2-app-structure\">Redux Essentials, Part 2: Redux App Structure</a></li>\n<li><a href=\"https://redux.js.org/tutorials/essentials/part-3-data-flow\">Redux Essentials, Part 3: Basic Redux Data Flow</a></li>\n<li><a href=\"https://redux.js.org/tutorials/essentials/part-4-using-data\">Redux Essentials, Part 4: Using Redux Data</a></li>\n<li><a href=\"https://redux.js.org/tutorials/essentials/part-5-async-logic\">Redux Essentials, Part 5: Async Logic and Data Fetching</a></li>\n<li><a href=\"https://redux.js.org/tutorials/essentials/part-6-performance-normalization\">Redux Essentials, Part 6: Performance and Normalizing Data</a></li>\n</ul>\n<h2>1. どのような状況で Redux を使うべきか</h2>\n<p><a href=\"https://redux.js.org/tutorials/essentials/part-1-overview-concepts#when-should-i-use-redux\">Part 1: Redux Overview and Concepts の When Should I Use Redux?</a>に、Redux が役立つ状況は以下の 4 つであることが述べられていました。</p>\n<ul>\n<li>アプリ内の多くの場所で必要とされる大量の State がある場合</li>\n<li>State が時間の経過とともに頻繁に更新される場合</li>\n<li>State を更新するロジックが複雑な場合</li>\n<li>アプリのコードベースが中規模または大規模で、多くの人が作業する可能性がある場合</li>\n</ul>\n<p>「このデータは Redux で管理すべきか」を考えるときに、「アプリ内で多く参照されること」以外にも、state の更新頻度、複雑性、規模感も重要であることを明確に理解できました。</p>\n<h2>2. redux-toolkit を使った Modern Redux</h2>\n<p>Redux Essentials の Part 3 からは、ユーザが記事を投稿できるサンプルアプリの開発を通して、redux-toolkit を使った Redux アプリの構築を学びます。\n代表的な API は以下の 3 つです。</p>\n<ul>\n<li><code>createSlice()</code></li>\n<li><code>createAsyncThunk()</code></li>\n<li><code>createEntityAdapter()</code></li>\n</ul>\n<p>以下は、これらの API の要約です。</p>\n<h3>createSlice() で Reducer に 集中したコードを書ける</h3>\n<p><code>createSlice()</code> は <code>reducers</code> で定義された Reducer を元に、Action や ActionCreator を自動生成してくれます。</p>\n<pre class=\"shiki\" style=\"background-color: #24292e\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">postsSlice</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">createSlice</span><span style=\"color: #E1E4E8\">({</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  name: </span><span style=\"color: #9ECBFF\">'posts'</span><span style=\"color: #E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  initialState,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  reducers: {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    postAdded: {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      </span><span style=\"color: #B392F0\">reducer</span><span style=\"color: #E1E4E8\">: (</span><span style=\"color: #FFAB70\">state</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #FFAB70\">action</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">PayloadAction</span><span style=\"color: #E1E4E8\">&#x3C;</span><span style=\"color: #B392F0\">Post</span><span style=\"color: #E1E4E8\">>) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        </span><span style=\"color: #6A737D\">// note: prepare -> reducer</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        state.</span><span style=\"color: #B392F0\">push</span><span style=\"color: #E1E4E8\">(action.payload);</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      },</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      </span><span style=\"color: #B392F0\">prepare</span><span style=\"color: #E1E4E8\">: ({ </span><span style=\"color: #FFAB70\">title</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #FFAB70\">content</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #FFAB70\">userId</span><span style=\"color: #E1E4E8\"> }</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">Pick</span><span style=\"color: #E1E4E8\">&#x3C;</span><span style=\"color: #B392F0\">Post</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #9ECBFF\">'title'</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">|</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'content'</span><span style=\"color: #E1E4E8\">> </span><span style=\"color: #F97583\">&#x26;</span><span style=\"color: #E1E4E8\"> { </span><span style=\"color: #FFAB70\">userId</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">string</span><span style=\"color: #E1E4E8\"> }) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        </span><span style=\"color: #6A737D\">// note: action creator相当のfunction</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        </span><span style=\"color: #6A737D\">// note: reduxはpostsSlice.actions.postAdded({ title, content }) がdispatchされるとprepareを実行し、reducerのactionに受け渡す</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        </span><span style=\"color: #F97583\">return</span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">          payload: {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">            id: </span><span style=\"color: #B392F0\">nanoid</span><span style=\"color: #E1E4E8\">(),</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">            title,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">            content,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">            user: userId,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">            date: </span><span style=\"color: #F97583\">new</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">Date</span><span style=\"color: #E1E4E8\">().</span><span style=\"color: #B392F0\">toISOString</span><span style=\"color: #E1E4E8\">(),</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">            reactions: initialReactions,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">          },</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        };</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      },</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    },</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  },</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">export</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> { </span><span style=\"color: #79B8FF\">postAdded</span><span style=\"color: #E1E4E8\"> } </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> postsSlice.actions;</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">export</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">default</span><span style=\"color: #E1E4E8\"> postsSlice.reducer;</span></span>\n<span class=\"line\"></span></code></pre>\n<p>Redux のしんどかった要素として、Action や ActionCreator 等のボイラープレートの記述がだるい問題がありましたが、slice を使用することで解決できます。</p>\n<p>Action は、React 内では、<code>dispatch(postAdded({ title, content, userId }))</code> のように dispatch します。\nまた、<code>store.dispatch(initiate())</code> のように、store の初期化時に React の外で dispatch することもできます。</p>\n<p>手書き時代の ActionCreator 内部 で行っていたような処理は、<code>prepare()</code> を定義して実行することができます。</p>\n<p><code>createSlice()</code> 内部では Immer が使用されているため、<code>state.push(action.payload)</code> のように Mutable に state の更新を記述できる点もポイントですね。</p>\n<h3>非同期的な state の更新は createAsyncThunk() で簡単に書ける</h3>\n<p>データのフェッチ等の非同期処理は <code>createAsyncThunk()</code> を使います。</p>\n<pre class=\"shiki\" style=\"background-color: #24292e\"><code><span class=\"line\"><span style=\"color: #F97583\">export</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">fetchPosts</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">createAsyncThunk</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'posts/fetchPosts'</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #F97583\">async</span><span style=\"color: #E1E4E8\"> () </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">response</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">await</span><span style=\"color: #E1E4E8\"> client.</span><span style=\"color: #B392F0\">get</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'/fakeApi/posts'</span><span style=\"color: #E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">return</span><span style=\"color: #E1E4E8\"> response.data </span><span style=\"color: #F97583\">as</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">Post</span><span style=\"color: #E1E4E8\">[];</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">postsSlice</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">createSlice</span><span style=\"color: #E1E4E8\">({</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #6A737D\">//省略</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #B392F0\">extraReducers</span><span style=\"color: #E1E4E8\">: (</span><span style=\"color: #FFAB70\">builder</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    builder</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      .</span><span style=\"color: #B392F0\">addCase</span><span style=\"color: #E1E4E8\">(fetchPosts.pending, (</span><span style=\"color: #FFAB70\">state</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        state.status </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'loading'</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      })</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      .</span><span style=\"color: #B392F0\">addCase</span><span style=\"color: #E1E4E8\">(fetchPosts.fulfilled, (</span><span style=\"color: #FFAB70\">state</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #FFAB70\">action</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        state.status </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'succeeded'</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        state.posts </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> state.posts.</span><span style=\"color: #B392F0\">concat</span><span style=\"color: #E1E4E8\">(action.payload);</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      })</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      .</span><span style=\"color: #B392F0\">addCase</span><span style=\"color: #E1E4E8\">(fetchPosts.rejected, (</span><span style=\"color: #FFAB70\">state</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #FFAB70\">action</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        state.status </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'failed'</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        state.error </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> action.error.message </span><span style=\"color: #F97583\">??</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      });</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  },</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">});</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>createSlice()</code> の外部で定義された ActionCreator に紐づく reducer は <code>extraReducers</code> で定義します。\nTypeScript で記述する場合は <code>builder.addCase()</code> 使って <code>state</code> と <code>action</code> の型を推論させる必要があります。</p>\n<p><code>createAsyncThunk()</code> で生成した thunk は <code>pending/fulfilled/rejected</code> パターンを dispatch するので、必要に応じてそれぞれの reducer を定義します。</p>\n<h3>データの正規化は createEntityAdapter() にお任せ</h3>\n<p>データを正規化したい場合は、 <code>createEntityAdapter()</code> を使います。\nデフォルトでは、 <code>{ ids: [], entities: { [id]: value } }</code> の形式で変換されます。</p>\n<pre class=\"shiki\" style=\"background-color: #24292e\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">postsAdapter</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">createEntityAdapter</span><span style=\"color: #E1E4E8\">&#x3C;</span><span style=\"color: #B392F0\">Post</span><span style=\"color: #E1E4E8\">>({</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #B392F0\">sortComparer</span><span style=\"color: #E1E4E8\">: (</span><span style=\"color: #FFAB70\">a</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #FFAB70\">b</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> b.date.</span><span style=\"color: #B392F0\">localeCompare</span><span style=\"color: #E1E4E8\">(a.date),</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">initialState</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> postsAdapter.</span><span style=\"color: #B392F0\">getInitialState</span><span style=\"color: #E1E4E8\">&#x3C;</span><span style=\"color: #B392F0\">AsyncState</span><span style=\"color: #E1E4E8\">>({</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  status: </span><span style=\"color: #9ECBFF\">'idle'</span><span style=\"color: #E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  error: </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">postsSlice</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">createSlice</span><span style=\"color: #E1E4E8\">({</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  name: </span><span style=\"color: #9ECBFF\">'posts'</span><span style=\"color: #E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  initialState,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  reducers: {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #6A737D\">// 省略</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  },</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #B392F0\">extraReducers</span><span style=\"color: #E1E4E8\">: (</span><span style=\"color: #FFAB70\">builder</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    builder.</span><span style=\"color: #B392F0\">addCase</span><span style=\"color: #E1E4E8\">(fetchPosts.fulfilled, (</span><span style=\"color: #FFAB70\">state</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #FFAB70\">action</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      state.status </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'succeeded'</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      postsAdapter.</span><span style=\"color: #B392F0\">upsertMany</span><span style=\"color: #E1E4E8\">(state, action.payload);</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    });</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    builder.</span><span style=\"color: #B392F0\">addCase</span><span style=\"color: #E1E4E8\">(addNewPost.fulfilled, postsAdapter.addOne);</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  },</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">});</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">export</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #FFAB70\">selectAll</span><span style=\"color: #E1E4E8\">: </span><span style=\"color: #79B8FF\">selectAllPosts</span><span style=\"color: #E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #FFAB70\">selectById</span><span style=\"color: #E1E4E8\">: </span><span style=\"color: #79B8FF\">selectPostById</span><span style=\"color: #E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #FFAB70\">selectIds</span><span style=\"color: #E1E4E8\">: </span><span style=\"color: #79B8FF\">selectPostIds</span><span style=\"color: #E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">} </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> postsAdapter.</span><span style=\"color: #B392F0\">getSelectors</span><span style=\"color: #E1E4E8\">&#x3C;</span><span style=\"color: #B392F0\">RootState</span><span style=\"color: #E1E4E8\">>((</span><span style=\"color: #FFAB70\">state</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> state.posts);</span></span>\n<span class=\"line\"></span></code></pre>\n<p>adapter の役割は、データの正規化、正規化データの更新メソッドの提供、ids のソート、initialState の提供、selector の提供等、多岐に渡ります。</p>\n<p><code>getSelectors()</code> で取得できる selector は Reselect によってメモ化されているのも嬉しいポイントです。</p>\n<p>手書き時代の Redux では、データの正規化のために<code>normalizr</code>による変換処理を定義する必要がありましたが、adapter にすべてが集約されていて開発者体験がとても良くなった印象です。</p>\n<h2>3. React のレンダリングパフォーマンスの最適化</h2>\n<p><a href=\"https://redux.js.org/tutorials/essentials/part-6-performance-normalization\">Redux Essentials, Part 6: Performance and Normalizing Data</a> では、React のレンダリングパフォーマンスを向上するための手法が丁寧に解説されており、非常に学びになりました。</p>\n<h3>コンポーネントを React.memo() でラップする</h3>\n<p>以下のように、親コンポーネントがリストデータを配列で持っている場合、その中の要素 1 つが更新されると配列全体が更新されてしまうため、結果的にリスト全体の再レンダリングが発生してしまいます。</p>\n<p>これは、親コンポーネントが再レンダリングされると、子コンポーネントも再レンダリングしてしまうため、一つのアイテムを更新したのにも関わらず、リスト全体が再レンダリングされてしまうためです。</p>\n<p>子コンポーネントを <code>React.memo()</code> でラップすることで、更新がなかった子コンポーネントは再レンダリングを回避することができます。</p>\n<p>ただし、<code>&#x3C;PostsList /></code> は <code>posts</code> が変わってしまうため再レンダリングを回避できないことに注意する必要があります。</p>\n<pre class=\"shiki\" style=\"background-color: #24292e\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">PostExcerpt</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">React</span><span style=\"color: #E1E4E8\">.</span><span style=\"color: #B392F0\">NamedExoticComponent</span><span style=\"color: #E1E4E8\">&#x3C;{ </span><span style=\"color: #FFAB70\">post</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">Post</span><span style=\"color: #E1E4E8\"> }> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> React.</span><span style=\"color: #B392F0\">memo</span><span style=\"color: #E1E4E8\">(({ </span><span style=\"color: #FFAB70\">post</span><span style=\"color: #E1E4E8\"> }) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> (</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  &#x3C;</span><span style=\"color: #85E89D\">article</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">className</span><span style=\"color: #F97583\">=</span><span style=\"color: #9ECBFF\">\"post-excerpt\"</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    &#x3C;</span><span style=\"color: #85E89D\">h3</span><span style=\"color: #E1E4E8\">>{post.title}&#x3C;/</span><span style=\"color: #85E89D\">h3</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    &#x3C;</span><span style=\"color: #85E89D\">div</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      &#x3C;</span><span style=\"color: #79B8FF\">PostAuthor</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">userId</span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\">{post.user} /></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      &#x3C;</span><span style=\"color: #79B8FF\">TimeAgo</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">timestamp</span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\">{post.date} /></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    &#x3C;/</span><span style=\"color: #85E89D\">div</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    &#x3C;</span><span style=\"color: #85E89D\">p</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">className</span><span style=\"color: #F97583\">=</span><span style=\"color: #9ECBFF\">\"post-content\"</span><span style=\"color: #E1E4E8\">>{post.content.</span><span style=\"color: #B392F0\">substring</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #79B8FF\">0</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #79B8FF\">100</span><span style=\"color: #E1E4E8\">)}&#x3C;/</span><span style=\"color: #85E89D\">p</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    &#x3C;</span><span style=\"color: #79B8FF\">ReactionButtons</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">post</span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\">{post} /></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    &#x3C;</span><span style=\"color: #79B8FF\">Link</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">to</span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\">{</span><span style=\"color: #9ECBFF\">`/posts/${</span><span style=\"color: #E1E4E8\">post</span><span style=\"color: #9ECBFF\">.</span><span style=\"color: #E1E4E8\">id</span><span style=\"color: #9ECBFF\">}`</span><span style=\"color: #E1E4E8\">} </span><span style=\"color: #B392F0\">className</span><span style=\"color: #F97583\">=</span><span style=\"color: #9ECBFF\">\"button muted-button\"</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      View Post</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    &#x3C;/</span><span style=\"color: #79B8FF\">Link</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  &#x3C;/</span><span style=\"color: #85E89D\">article</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">export</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">PostsList</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">React</span><span style=\"color: #E1E4E8\">.</span><span style=\"color: #B392F0\">VFC</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> () </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">posts</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">useTypedSelector</span><span style=\"color: #E1E4E8\">(selectAllPosts);</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">postStatus</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">useTypedSelector</span><span style=\"color: #E1E4E8\">((</span><span style=\"color: #FFAB70\">state</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> state.posts.status);</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">error</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">useTypedSelector</span><span style=\"color: #E1E4E8\">((</span><span style=\"color: #FFAB70\">state</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> state.posts.error);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">orderedPosts</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">useMemo</span><span style=\"color: #E1E4E8\">(</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    () </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> (postStatus </span><span style=\"color: #F97583\">===</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'succeeded'</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">?</span><span style=\"color: #E1E4E8\"> posts.</span><span style=\"color: #B392F0\">slice</span><span style=\"color: #E1E4E8\">().</span><span style=\"color: #B392F0\">sort</span><span style=\"color: #E1E4E8\">((</span><span style=\"color: #FFAB70\">a</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #FFAB70\">b</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> b.date.</span><span style=\"color: #B392F0\">localeCompare</span><span style=\"color: #E1E4E8\">(a.date)) </span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> posts),</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    [postStatus, posts]</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  );</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">return</span><span style=\"color: #E1E4E8\"> (</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    &#x3C;</span><span style=\"color: #85E89D\">section</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">className</span><span style=\"color: #F97583\">=</span><span style=\"color: #9ECBFF\">\"posts-list\"</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      &#x3C;</span><span style=\"color: #85E89D\">h2</span><span style=\"color: #E1E4E8\">>Posts&#x3C;/</span><span style=\"color: #85E89D\">h2</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      {postStatus </span><span style=\"color: #F97583\">===</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'loading'</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">?</span><span style=\"color: #E1E4E8\"> (</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        &#x3C;</span><span style=\"color: #79B8FF\">Spinner</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">text</span><span style=\"color: #F97583\">=</span><span style=\"color: #9ECBFF\">\"loading...\"</span><span style=\"color: #E1E4E8\"> /></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      ) </span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> postStatus </span><span style=\"color: #F97583\">===</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'succeeded'</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">?</span><span style=\"color: #E1E4E8\"> (</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        orderedPosts.</span><span style=\"color: #B392F0\">map</span><span style=\"color: #E1E4E8\">((</span><span style=\"color: #FFAB70\">post</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> &#x3C;</span><span style=\"color: #79B8FF\">PostExcerpt</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">key</span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\">{post.id} </span><span style=\"color: #B392F0\">post</span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\">{post} />)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      ) </span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> postStatus </span><span style=\"color: #F97583\">===</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'failed'</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">?</span><span style=\"color: #E1E4E8\"> (</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        &#x3C;</span><span style=\"color: #85E89D\">div</span><span style=\"color: #E1E4E8\">>{error}&#x3C;/</span><span style=\"color: #85E89D\">div</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      ) </span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    &#x3C;/</span><span style=\"color: #85E89D\">section</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  );</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<h3>リストの親コンポーネントではアイテムの ids 配列だけを参照する</h3>\n<p>リストデータを正規化することのメリットの一つは、リスト型コンポーネントのアイテムが更新される際に、リストの親コンポーネントの再レンダリングを防ぐことが可能なことです。</p>\n<p>上述の <code>posts</code> を正規化することで、親の <code>&#x3C;PostsList /></code> は ids だけを参照すれば良くなり、アイテムの一部の値が更新されても <code>id</code> が更新されない限りは再レンダリングされなくなります。</p>\n<pre class=\"shiki\" style=\"background-color: #24292e\"><code><span class=\"line\"><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">PostExcerpt</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">React</span><span style=\"color: #E1E4E8\">.</span><span style=\"color: #B392F0\">VFC</span><span style=\"color: #E1E4E8\">&#x3C;{ </span><span style=\"color: #FFAB70\">postId</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">EntityId</span><span style=\"color: #E1E4E8\"> }> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> ({ </span><span style=\"color: #FFAB70\">postId</span><span style=\"color: #E1E4E8\"> }) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">post</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">useTypedSelector</span><span style=\"color: #E1E4E8\">((</span><span style=\"color: #FFAB70\">state</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">selectPostById</span><span style=\"color: #E1E4E8\">(state, postId));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">if</span><span style=\"color: #E1E4E8\"> (</span><span style=\"color: #F97583\">!</span><span style=\"color: #E1E4E8\">post) {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #F97583\">return</span><span style=\"color: #E1E4E8\"> &#x3C;</span><span style=\"color: #85E89D\">div</span><span style=\"color: #E1E4E8\">>Post not found.&#x3C;/</span><span style=\"color: #85E89D\">div</span><span style=\"color: #E1E4E8\">>;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">return</span><span style=\"color: #E1E4E8\"> (</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    &#x3C;</span><span style=\"color: #85E89D\">article</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">className</span><span style=\"color: #F97583\">=</span><span style=\"color: #9ECBFF\">\"post-excerpt\"</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      &#x3C;</span><span style=\"color: #85E89D\">h3</span><span style=\"color: #E1E4E8\">>{post.title}&#x3C;/</span><span style=\"color: #85E89D\">h3</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      &#x3C;</span><span style=\"color: #85E89D\">div</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        &#x3C;</span><span style=\"color: #79B8FF\">PostAuthor</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">userId</span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\">{post.user} /></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        &#x3C;</span><span style=\"color: #79B8FF\">TimeAgo</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">timestamp</span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\">{post.date} /></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      &#x3C;/</span><span style=\"color: #85E89D\">div</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      &#x3C;</span><span style=\"color: #85E89D\">p</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">className</span><span style=\"color: #F97583\">=</span><span style=\"color: #9ECBFF\">\"post-content\"</span><span style=\"color: #E1E4E8\">>{post.content.</span><span style=\"color: #B392F0\">substring</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #79B8FF\">0</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #79B8FF\">100</span><span style=\"color: #E1E4E8\">)}&#x3C;/</span><span style=\"color: #85E89D\">p</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      &#x3C;</span><span style=\"color: #79B8FF\">ReactionButtons</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">post</span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\">{post} /></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      &#x3C;</span><span style=\"color: #79B8FF\">Link</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">to</span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\">{</span><span style=\"color: #9ECBFF\">`/posts/${</span><span style=\"color: #E1E4E8\">post</span><span style=\"color: #9ECBFF\">.</span><span style=\"color: #E1E4E8\">id</span><span style=\"color: #9ECBFF\">}`</span><span style=\"color: #E1E4E8\">} </span><span style=\"color: #B392F0\">className</span><span style=\"color: #F97583\">=</span><span style=\"color: #9ECBFF\">\"button muted-button\"</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        View Post</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      &#x3C;/</span><span style=\"color: #79B8FF\">Link</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    &#x3C;/</span><span style=\"color: #85E89D\">article</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  );</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">export</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">PostsList</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">React</span><span style=\"color: #E1E4E8\">.</span><span style=\"color: #B392F0\">VFC</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> () </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">dispatch</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">useTypedDispatch</span><span style=\"color: #E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">orderedPostIds</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">useTypedSelector</span><span style=\"color: #E1E4E8\">(selectPostIds);</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">postStatus</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">useTypedSelector</span><span style=\"color: #E1E4E8\">((</span><span style=\"color: #FFAB70\">state</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> state.posts.status);</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">error</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">useTypedSelector</span><span style=\"color: #E1E4E8\">((</span><span style=\"color: #FFAB70\">state</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> state.posts.error);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">return</span><span style=\"color: #E1E4E8\"> (</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    &#x3C;</span><span style=\"color: #85E89D\">section</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">className</span><span style=\"color: #F97583\">=</span><span style=\"color: #9ECBFF\">\"posts-list\"</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      &#x3C;</span><span style=\"color: #85E89D\">h2</span><span style=\"color: #E1E4E8\">>Posts&#x3C;/</span><span style=\"color: #85E89D\">h2</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      {postStatus </span><span style=\"color: #F97583\">===</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'loading'</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">?</span><span style=\"color: #E1E4E8\"> (</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        &#x3C;</span><span style=\"color: #79B8FF\">Spinner</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">text</span><span style=\"color: #F97583\">=</span><span style=\"color: #9ECBFF\">\"loading...\"</span><span style=\"color: #E1E4E8\"> /></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      ) </span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> postStatus </span><span style=\"color: #F97583\">===</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'succeeded'</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">?</span><span style=\"color: #E1E4E8\"> (</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        orderedPostIds.</span><span style=\"color: #B392F0\">map</span><span style=\"color: #E1E4E8\">((</span><span style=\"color: #FFAB70\">postId</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> &#x3C;</span><span style=\"color: #79B8FF\">PostExcerpt</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">key</span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\">{postId} </span><span style=\"color: #B392F0\">postId</span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\">{postId} />)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      ) </span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> postStatus </span><span style=\"color: #F97583\">===</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'failed'</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">?</span><span style=\"color: #E1E4E8\"> (</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        &#x3C;</span><span style=\"color: #85E89D\">div</span><span style=\"color: #E1E4E8\">>{error}&#x3C;/</span><span style=\"color: #85E89D\">div</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      ) </span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">null</span><span style=\"color: #E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    &#x3C;/</span><span style=\"color: #85E89D\">section</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  );</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<h3>メモ化されたセレクタ関数を useSelector に渡す</h3>\n<p><code>useSelector()</code> は Action が dispatch されるたびに再実行され、そこで新しい参照値を返すとコンポーネントが再レンダリングされます。</p>\n<p>select 関数で配列やオブジェクトが生成される場合は、値の内容が変化していなくても常に新しい参照値となってしまうため、不要な再レンダリングを発生させてしまいます。</p>\n<p>例えば、下記の<code>&#x3C;UserPage /></code> で計算されている<code>postsForUser</code> は <code>allPosts.filter()</code> によって常に新しい参照が返されてしまうので、どこかしらで Action が dispatch される度に、<code>&#x3C;UserPage /></code>は再レンダリングしてしまいます。</p>\n<pre class=\"shiki\" style=\"background-color: #24292e\"><code><span class=\"line\"><span style=\"color: #F97583\">export</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">UserPage</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">React</span><span style=\"color: #E1E4E8\">.</span><span style=\"color: #B392F0\">VFC</span><span style=\"color: #E1E4E8\">&#x3C;</span><span style=\"color: #B392F0\">Props</span><span style=\"color: #E1E4E8\">> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> ({ </span><span style=\"color: #FFAB70\">match</span><span style=\"color: #E1E4E8\"> }) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> { </span><span style=\"color: #79B8FF\">userId</span><span style=\"color: #E1E4E8\"> } </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> match.params;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">user</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">useTypedSelector</span><span style=\"color: #E1E4E8\">((</span><span style=\"color: #FFAB70\">state</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">selectUserById</span><span style=\"color: #E1E4E8\">(state, userId));</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">postsForUser</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">useTypedSelector</span><span style=\"color: #E1E4E8\">((</span><span style=\"color: #FFAB70\">state</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">allPosts</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">selectAllPosts</span><span style=\"color: #E1E4E8\">(state);</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #F97583\">return</span><span style=\"color: #E1E4E8\"> allPosts.</span><span style=\"color: #B392F0\">filter</span><span style=\"color: #E1E4E8\">((</span><span style=\"color: #FFAB70\">post</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> post.user </span><span style=\"color: #F97583\">===</span><span style=\"color: #E1E4E8\"> userId);</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  });</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #6A737D\">// 省略</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">};</span></span>\n<span class=\"line\"></span></code></pre>\n<p>これを解決するためには、メモ化されたセレクタ関数を <code>useSelector()</code> に渡す必要があります。\nredux-toolkit では、セレクタ関数をメモ化するための <code>createSelector()</code> が提供されており、上記の <code>postsForUser</code> の セレクタは下記のようにメモ化することができます。</p>\n<pre class=\"shiki\" style=\"background-color: #24292e\"><code><span class=\"line\"><span style=\"color: #F97583\">export</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">selectPostsByUser</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">createSelector</span><span style=\"color: #E1E4E8\">(</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  [selectAllPosts, </span><span style=\"color: #B392F0\">selector</span><span style=\"color: #E1E4E8\">((</span><span style=\"color: #FFAB70\">_</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #FFAB70\">userId</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">string</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> userId)], </span><span style=\"color: #6A737D\">// input selectors</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  (</span><span style=\"color: #FFAB70\">posts</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #FFAB70\">userId</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> posts.</span><span style=\"color: #B392F0\">filter</span><span style=\"color: #E1E4E8\">((</span><span style=\"color: #FFAB70\">post</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> post.user </span><span style=\"color: #F97583\">===</span><span style=\"color: #E1E4E8\"> userId) </span><span style=\"color: #6A737D\">// output selector</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">);</span></span>\n<span class=\"line\"></span></code></pre>\n<p><code>createSelector()</code> の第一引数は input selectors 配列で、メモ化対象の値を返します。\n第二引数は output selector で、input selector の配列が順に引数として渡される関数です。\noutput selector で return した値がこのセレクタが返す値となります。\nこうすることで、<code>posts</code> か <code>userId</code> のどちらかが変化したときのみ、新しい参照が返されるため、結果として、不要な再レンダリングを防ぐことができます。</p>\n<p>上記の<code>selector((_, userId: string) => userId)</code> 内の<code>selector()</code>は、自分で定義した util 関数です。\nTS で純粋なセレクタを記述するときに、第一引数の<code>RootState</code>の型を省略できます。</p>\n<pre class=\"shiki\" style=\"background-color: #24292e\"><code><span class=\"line\"><span style=\"color: #6A737D\">// src/app/selector.ts</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #E1E4E8\"> { RootState } </span><span style=\"color: #F97583\">from</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'./store'</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">type</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">Extras</span><span style=\"color: #E1E4E8\">&#x3C;</span><span style=\"color: #B392F0\">T</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">extends</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">unknown</span><span style=\"color: #E1E4E8\">[]> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">T</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">extends</span><span style=\"color: #E1E4E8\"> [</span><span style=\"color: #B392F0\">RootState</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #F97583\">...infer</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">Extras</span><span style=\"color: #E1E4E8\">] </span><span style=\"color: #F97583\">?</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">Extras</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> [];</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">export</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">selector</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> &#x3C;</span><span style=\"color: #B392F0\">T</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">extends</span><span style=\"color: #E1E4E8\"> (</span><span style=\"color: #FFAB70\">state</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">RootState</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #F97583\">...</span><span style=\"color: #FFAB70\">extras</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">any</span><span style=\"color: #E1E4E8\">[]) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">unknown</span><span style=\"color: #E1E4E8\">>(</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #FFAB70\">select</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">T</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">)</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">T</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">extends</span><span style=\"color: #E1E4E8\"> (</span><span style=\"color: #F97583\">...</span><span style=\"color: #FFAB70\">params</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">infer</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">Params</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">infer</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">Return</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">?</span><span style=\"color: #E1E4E8\"> (</span><span style=\"color: #FFAB70\">state</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">Params</span><span style=\"color: #E1E4E8\">[</span><span style=\"color: #79B8FF\">0</span><span style=\"color: #E1E4E8\">], </span><span style=\"color: #F97583\">...</span><span style=\"color: #FFAB70\">extras</span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">Extras</span><span style=\"color: #E1E4E8\">&#x3C;</span><span style=\"color: #B392F0\">Params</span><span style=\"color: #E1E4E8\">>) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">Return</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">:</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">never</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> select </span><span style=\"color: #F97583\">as</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">any</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<h2>おわりに</h2>\n<p>Redux Essentials を読むことで、Redux 公式の推奨アプローチや React のレンダリングパフォーマンスの最適化について学ぶことができました。</p>\n<p>redux-toolkit を使ったコードは、ボイラープレートなコードをすべて手書きで書いていた頃と比べて、格段に少ない記述量で書くことができます。しかし、非同期処理の扱いは <code>pending/fulfilled/rejected</code> パターンを reducer に記述しなければならず、現代の hooks ベースの API（Apollo 等）と比較するとまだ冗長であると感じます。</p>\n<p>次回は、Part2 ということで、そこら辺の悩みも解決できる RTK Query についての学びをまとめようと思います。</p>\n<p>（ブログ作っただけで終わりにならなくて良かった〜〜〜〜）</p>","url":"https://ytakahashii.github.io/blog/lerning-from-redux-essentials-part1","isPrivate":false}},"__N_SSG":true}